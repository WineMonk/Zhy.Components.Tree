<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Zhy.Components.Tree</name>
    </assembly>
    <members>
        <member name="T:Zhy.Components.Tree.IObservableTree`1">
            <summary>
            变化可视树或树节点
            </summary>
            <typeparam name="TTreeNode">树类型</typeparam>
        </member>
        <member name="P:Zhy.Components.Tree.IObservableTree`1.Parent">
            <summary>
            父节点
            </summary>
            <remarks>
                序列化时需要忽略此属性！
            </remarks>
        </member>
        <member name="P:Zhy.Components.Tree.IObservableTree`1.Children">
            <summary>
            子节点
            </summary>
        </member>
        <member name="M:Zhy.Components.Tree.IObservableTree`1.Clone">
            <summary>
            克隆
            </summary>
            <returns>克隆结果实例</returns>
        </member>
        <member name="T:Zhy.Components.Tree.IObservableTree`2">
            <summary>
            拥有键的变化可视树或树节点
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TTreeNode">树类型</typeparam>
        </member>
        <member name="P:Zhy.Components.Tree.IObservableTree`2.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="P:Zhy.Components.Tree.IObservableTree`2.PKey">
            <summary>
            父节点键
            </summary>
        </member>
        <member name="P:Zhy.Components.Tree.IObservableTree`2.Parent">
            <summary>
            父节点
            </summary>
            <remarks>
                序列化时需要忽略此属性！
            </remarks>
        </member>
        <member name="P:Zhy.Components.Tree.IObservableTree`2.Children">
            <summary>
            子节点
            </summary>
        </member>
        <member name="P:Zhy.Components.Tree.IObservableTree`2.Item(`0)">
            <summary>
            子节点索引器
            </summary>
            <param name="key">键</param>
            <returns>对应子节点</returns>
        </member>
        <member name="M:Zhy.Components.Tree.IObservableTree`2.Clone">
            <summary>
            克隆
            </summary>
            <returns>克隆结果实例</returns>
        </member>
        <member name="T:Zhy.Components.Tree.ITree">
            <summary>
            树节点
            </summary>
        </member>
        <member name="T:Zhy.Components.Tree.ITree`1">
            <summary>
            变化可视树或树节点
            </summary>
            <typeparam name="TTreeNode">树类型</typeparam>
        </member>
        <member name="P:Zhy.Components.Tree.ITree`1.Parent">
            <summary>
            父节点
            </summary>
            <remarks>
                序列化时需要忽略此属性！
            </remarks>
        </member>
        <member name="P:Zhy.Components.Tree.ITree`1.Children">
            <summary>
            子节点
            </summary>
        </member>
        <member name="M:Zhy.Components.Tree.ITree`1.Clone">
            <summary>
            克隆
            </summary>
            <returns>克隆结果实例</returns>
        </member>
        <member name="T:Zhy.Components.Tree.ITree`2">
            <summary>
            拥有键的变化可视树或树节点
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TTreeNode">树类型</typeparam>
        </member>
        <member name="P:Zhy.Components.Tree.ITree`2.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="P:Zhy.Components.Tree.ITree`2.PKey">
            <summary>
            父节点键
            </summary>
        </member>
        <member name="P:Zhy.Components.Tree.ITree`2.Parent">
            <summary>
            父节点
            </summary>
            <remarks>
                序列化时需要忽略此属性！
            </remarks>
        </member>
        <member name="P:Zhy.Components.Tree.ITree`2.Children">
            <summary>
            子节点
            </summary>
        </member>
        <member name="P:Zhy.Components.Tree.ITree`2.Item(`0)">
            <summary>
            子节点索引器
            </summary>
            <param name="key">键</param>
            <returns>对应子节点</returns>
        </member>
        <member name="M:Zhy.Components.Tree.ITree`2.Clone">
            <summary>
            克隆
            </summary>
            <returns>克隆结果实例</returns>
        </member>
        <member name="T:Zhy.Components.Tree.TreeExtension">
            <summary>
            树扩展方法
            </summary>
        </member>
        <member name="M:Zhy.Components.Tree.TreeExtension.Search``1(Zhy.Components.Tree.ITree{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            搜索树
            </summary>
            <typeparam name="TTreeNode">树类型</typeparam>
            <param name="tree">树实例</param>
            <param name="expression">搜索验证表达式</param>
            <param name="isClone">搜索结果是否以新生成的拷贝对象返回</param>
            <returns>搜索结果树</returns>
        </member>
        <member name="M:Zhy.Components.Tree.TreeExtension.Search``2(Zhy.Components.Tree.ITree{``0,``1},System.Func{``1,System.Boolean},System.Boolean)">
            <summary>
            搜索树
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TTreeNode">树类型</typeparam>
            <param name="tree">树实例</param>
            <param name="expression">搜索验证表达式</param>
            <param name="isClone">搜索结果是否以新生成的拷贝对象返回</param>
            <returns>搜索结果树</returns>
        </member>
        <member name="M:Zhy.Components.Tree.TreeExtension.Traversal``1(Zhy.Components.Tree.ITree{``0},System.Action{``0})">
            <summary>
            遍历树
            </summary>
            <typeparam name="TTreeNode">树类型</typeparam>
            <param name="tree">树实例</param>
            <param name="expression">遍历表达式</param>
            <remarks>
                遍历时不允许对子节点进行改动，若需改动请使用“SafeTraversal”方法！
            </remarks>
        </member>
        <member name="M:Zhy.Components.Tree.TreeExtension.Traversal``2(Zhy.Components.Tree.ITree{``0,``1},System.Action{``1})">
            <summary>
            遍历树
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TTreeNode">树类型</typeparam>
            <param name="tree">树实例</param>
            <param name="expression">遍历表达式</param>
            <remarks>
                遍历时不允许对子节点进行改动，若需改动请使用“SafeTraversal”方法！
            </remarks>
        </member>
        <member name="M:Zhy.Components.Tree.TreeExtension.SafeTraversal``1(Zhy.Components.Tree.ITree{``0},System.Action{``0})">
            <summary>
            遍历树
            </summary>
            <typeparam name="TTreeNode">树类型</typeparam>
            <param name="tree">树实例</param>
            <param name="expression">遍历表达式</param>
        </member>
        <member name="M:Zhy.Components.Tree.TreeExtension.SafeTraversal``2(Zhy.Components.Tree.ITree{``0,``1},System.Action{``1})">
            <summary>
            遍历树
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TTreeNode">树类型</typeparam>
            <param name="tree">树实例</param>
            <param name="expression">遍历表达式</param>
        </member>
        <member name="M:Zhy.Components.Tree.TreeExtension.Search``1(Zhy.Components.Tree.IObservableTree{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            搜索树
            </summary>
            <typeparam name="TTreeNode">树类型</typeparam>
            <param name="tree">树实例</param>
            <param name="expression">搜索验证表达式</param>
            <param name="isClone">搜索结果是否以新生成的拷贝对象返回</param>
            <returns>搜索结果树</returns>
        </member>
        <member name="M:Zhy.Components.Tree.TreeExtension.Search``2(Zhy.Components.Tree.IObservableTree{``0,``1},System.Func{``1,System.Boolean},System.Boolean)">
            <summary>
            搜索树
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TTreeNode">树类型</typeparam>
            <param name="tree">树实例</param>
            <param name="expression">搜索验证表达式</param>
            <param name="isClone">搜索结果是否以新生成的拷贝对象返回</param>
            <returns>搜索结果树</returns>
        </member>
        <member name="M:Zhy.Components.Tree.TreeExtension.Traversal``1(Zhy.Components.Tree.IObservableTree{``0},System.Action{``0})">
            <summary>
            遍历树
            </summary>
            <typeparam name="TTreeNode">树类型</typeparam>
            <param name="tree">树实例</param>
            <param name="expression">遍历表达式</param>
            <remarks>
                遍历时不允许对子节点进行改动，若需改动请使用“SafeTraversal”方法！
            </remarks>
        </member>
        <member name="M:Zhy.Components.Tree.TreeExtension.Traversal``2(Zhy.Components.Tree.IObservableTree{``0,``1},System.Action{``1})">
            <summary>
            遍历树
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TTreeNode">树类型</typeparam>
            <param name="tree">树实例</param>
            <param name="expression">遍历表达式</param>
            <remarks>
                遍历时不允许对子节点进行改动，若需改动请使用“SafeTraversal”方法！
            </remarks>
        </member>
        <member name="M:Zhy.Components.Tree.TreeExtension.SafeTraversal``1(Zhy.Components.Tree.IObservableTree{``0},System.Action{``0})">
            <summary>
            遍历树
            </summary>
            <typeparam name="TTreeNode">树类型</typeparam>
            <param name="tree">树实例</param>
            <param name="expression">遍历表达式</param>
        </member>
        <member name="M:Zhy.Components.Tree.TreeExtension.SafeTraversal``2(Zhy.Components.Tree.IObservableTree{``0,``1},System.Action{``1})">
            <summary>
            遍历树
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TTreeNode">树类型</typeparam>
            <param name="tree">树实例</param>
            <param name="expression">遍历表达式</param>
        </member>
        <member name="T:Zhy.Components.Tree.TreeUtil">
            <summary>
            树工具类
            </summary>
        </member>
        <member name="M:Zhy.Components.Tree.TreeUtil.JsonToTree``1(System.String)">
            <summary>
            自Json字符串加载实例
            </summary>
            <typeparam name="TTree">树类型</typeparam>
            <param name="jsonText">Json文本</param>
            <returns>树实例</returns>
        </member>
        <member name="M:Zhy.Components.Tree.TreeUtil.JsonToObservableTree``1(System.String)">
            <summary>
            自Json字符串加载实例
            </summary>
            <typeparam name="TTree">树类型</typeparam>
            <param name="jsonText">Json文本</param>
            <returns>树实例</returns>
        </member>
        <member name="M:Zhy.Components.Tree.TreeUtil.JsonToTree``2(System.String)">
            <summary>
            自Json字符串加载实例
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TTree">树类型</typeparam>
            <param name="jsonText">Json文本</param>
            <returns>树实例</returns>
        </member>
        <member name="M:Zhy.Components.Tree.TreeUtil.JsonToObservableTree``2(System.String)">
            <summary>
            自Json字符串加载实例
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TTree">树类型</typeparam>
            <param name="jsonText">Json文本</param>
            <returns>树实例</returns>
        </member>
    </members>
</doc>
